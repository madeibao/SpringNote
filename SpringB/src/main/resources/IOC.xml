<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册一个Person对象，Spring会自动创建这个Person对象 -->
    <!--
    一个Bean标签可以注册一个组件（对象、类）
    class,写要注册的组件的全类名
    id,这个对象的唯一标识
    -->
    <bean id="person01" class="com.mayuan.Person">
        <!-- 使用property标签为Person对象的属性赋值
             name="lastName"，指定属性名
             value="张三"，为这个属性赋值
        -->
        <property name="lastName" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="email" value="zhangsan@qq.com"></property>
        <property name="gender" value="男"></property>
    </bean>

    <bean id="person02" class="com.mayuan.Person">
        <property name="lastName" value="小花"></property>
    </bean>

    <bean id="person03" class="com.mayuan.Person">
        <!-- 调用有参构造器进行创建对象并赋值 -->
        <constructor-arg name="lastName" value="小明"></constructor-arg>
        <constructor-arg name="age" value="17"></constructor-arg>
        <constructor-arg name="email" value="4887845@qq.com"></constructor-arg>
        <constructor-arg name="gender" value="男"></constructor-arg>
    </bean>

    <bean id="person04" class="com.mayuan.Person">
        <!-- 如果省略name属性，需要严格按照构造器参数的位置指定 -->
        <!-- 也可以打乱顺序，用index为参数指定索引，从0开始 -->
        <!-- public Person(String lastName, Integer age, String gender, String email) -->
        <constructor-arg value="大卫" index="0"></constructor-arg>
        <constructor-arg value="18" index="1"></constructor-arg>
        <constructor-arg value="4564@qq.com" index="3"></constructor-arg>
        <constructor-arg value="男" index="2"></constructor-arg>
    </bean>

    <bean id="person05" class="com.mayuan.Person">
        <!-- 重载的情况下type可以指定参数的类型 -->
        <!-- public Person(String lastName, Integer age, String gender) -->
        <!-- public Person(String lastName, String email, String gender) -->
        <constructor-arg value="老王"></constructor-arg>
        <constructor-arg value="18" index="1" type="java.lang.Integer"></constructor-arg>
        <constructor-arg value="男"></constructor-arg>
    </bean>

    <!-- 显然以上所有赋值办法中，person01的办法可以免去之后所有问题 -->

    <!-- 通过p名称空间为bean赋值，导入p名称空间 -->
    <!-- 名称空间，在xml中名称空间是用来防止标签重复的 -->
    <!--
        <book>
            <b:name>西游记</b:name>
            <price>19.98</price>
            <author>
                <a:name>吴承恩</a:name>
                <gender>男</gender>
            </author>
        </book>

        带前缀的标签<c:forEach>  <jsp:forward>
     -->
    <bean id="person06" class="com.mayuan.Person"
          p:age="18" p:email="xiaoming@qq.com"
          p:lastName="哈哈" p:gender="男">
    </bean>

</beans>
